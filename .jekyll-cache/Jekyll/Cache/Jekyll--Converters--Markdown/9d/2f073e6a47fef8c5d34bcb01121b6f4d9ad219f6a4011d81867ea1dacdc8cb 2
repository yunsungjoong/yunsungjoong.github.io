I"/<h2 id="프레임워크--라이브러리">프레임워크 &amp; 라이브러리</h2>

<p>프레임워크와 라이브러리의 정확한 차이점이 무엇일까?
대충 알것 같지만 정확히 어떠한 차이점이 있는지 알아보자 
프레임워크는 미리 만들어 둔 반제품이나 , 확장해서 사용할 수 있도록 준비된 추상 라이브러리의 집합이 아니다.
프레임워크가 어떤 것인지 이해하려면 라이브러리와 프레임워크가 어떻게 다른지 알아야 할 것이다.
먼저 프레임워크와 라이브러리의 개념과 차이점에 대해 알아보자</p>

<p><img src="/assets/images/img/Gitblog_img/22/04/27/Library_02.png" /></p>

<h3 id="framwork프레임워크">Framwork(프레임워크)</h3>
<hr />

<p>프레임워크는 뼈대나 기반구조를 뜻한다.
제어의 역전 개념이 적용된 대표적인 기술이다. 소프트웨어에서의 프레임워크는 ‘소프트웨어의 특정 문제를 해결하기 위해 상호 협력하는 크래스와 인터페이스의 결합’ 이라 할 수 있다.
완성된 어플리케이션이 아닌 프로그래머가 완성시키는 작업을 해야한다.
객체 지향 개발을 하게 되면서 통합성, 일관성의 부족이 발생되는 문제를 해결할 방법중 하나라고 할 수 있다.</p>

<p>즉 간단하게 프레임워크는 완성된 제품이 아닌 완성된 제품을 만들기 위해서 개발자를 도와주는 또는 기반이 되는 역할을 한다.
이를 소프트웨어적으로 다시 정의하면 소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스 집합이다.</p>

<h4 id="프레임워크-예시">프레임워크 예시)</h4>
<ul>
  <li>Java 개발자라면 Spring</li>
  <li>Python 개발자라면 Django</li>
  <li>JavaScript 개발자라면 Node.js</li>
  <li>PHP 개발자라면 Laravel</li>
</ul>

<h4 id="프레임워크의-특징">프레임워크의 특징</h4>
<ul>
  <li>특정 개념들의 추상화를 제공하는 여러가지 여러 클래스나 컴포넌트로 구성되어 있다.</li>
  <li>추상적인 개념들이 문제를 해결하기 위해 같이 작업하는 방법을 정의한다.</li>
  <li>컴포넌트들은 재사용이 가능하다.</li>
  <li>높은 수준에서 패턴들을 조작할 수 있다.</li>
</ul>

<h4 id="프레임워크의-장점">프레임워크의 장점</h4>
<ul>
  <li>가이드를 제공함으로써 프로그램을 체계적으로 관리할 수 있음</li>
  <li>기본적인 설계와 라이브러리를 제공해 개발 속도를 향상시킴</li>
  <li>코드의 재사용성이 높고 확장성이 좋음</li>
</ul>

<h4 id="프레임워크의-단점">프레임워크의 단점</h4>
<ul>
  <li>각 프레임워크에 따른 별도의 학습을 필요로 함.</li>
  <li>자유롭고 유연하게 개발이 불가능함</li>
  <li>프로젝트의 용량이 증가함</li>
</ul>

<h3 id="라이브러리library">라이브러리(Library)</h3>
<hr />
<p>라이브러리는 단순 활용가능한 도구들의 집합을 말한다. 
즉, 개발자가 만든 클래스에서 호출하여 사용, 클래스들의 나열로 필요한 클래스를 불러서 사용하는 방식을 취하고 있다.</p>

<h4 id="라이브러리-예시">라이브러리 예시</h4>
<ul>
  <li>가장 유명한 자바스크립트 라이브러리는 jQuery이다.<br />
ㄴ(간혹 프레임워크라고 소개되는 곳이 있는데 공식 사이트에서도 라이브러리로 명시되어 있다.)</li>
  <li>그래픽 사용자 인터페이스(GUI)에서 재사용하기 쉽게 버튼, 테이블 같은 구성 요소를 호출해서 쓸 수 있도록 분리해두었다면 라이브러리다.</li>
  <li>Windows에서 간혹 보았을 dll 확장자는 동적 링크 라이브러리 (dynamic-link library, DLL) 의 약자로 라이브러리라고 할 수 있다.</li>
  <li>객체지향 프로그래밍(object-oriented programming, OPP)은 기본적으로 각 기능마다 함수화하는 것으로 클래스 라이브러리라고 할 수 있다.</li>
</ul>

<p><img src="/assets/images/img/Gitblog_img/22/04/27/framwork&amp;library_01.png" /></p>

<p>프레임워크를 집이라 비유하였고 라이브러리를 집 안에 포함된 가구에 비유하였다.
프레임 워크는 가져다가 사용한다는 것보단 특정 공간에 들어가서 사용한다는 느낌이고 
라이브러리는 라이브러리 자체를 가져가 사용하고 호출하는 용도로 사용된다고 생각하면 이해하기 쉬울것이다.</p>

<h4 id="라이브러리-장점">라이브러리 장점</h4>
<ul>
  <li>코드를 재사용하기 쉽다.</li>
  <li>코드의 내용을 숨겨 기술 유출을 방지할 수 있다.</li>
  <li>이미 구현되어 있는 기능들을 가져다 쓸 수 있어 개발 시간을 단축할 수 있다.</li>
  <li>컴파일 시간을 단축할 수 있다. (라이브러리는 미리 컴파일되어 있어 링킹만 하면 바로 사용 가능하다)</li>
</ul>

<h3 id="라이브러리의-종류">라이브러리의 종류</h3>
<p>라이브러리는 정적 랭킹 방식고 ㅏ동적 랭킹 방식에 따라 <code class="language-plaintext highlighter-rouge">정적 라이브러리와 동적 라이브러리</code> (= 공유 라이브러리)로 나눌 수 있다.
결국 , 각 라이브러리의 정의 및 장단점은 각 링킹 방식의 정의 및 장단점과 같다고 보면 된다.</p>

<p><img src="/assets/images/img/Gitblog_img/22/04/27/Library_01.png" /></p>

<h5 id="정적-라이브러리static-link-library-정의">정적 라이브러리(Static link library) 정의</h5>
<p>정적 라이브러리는 정적 링킹 과정에서 링커가 프로그램에 필요로 하는 부분을 라이브러리에서
찾아 실행 파일에 복사하는 방식의 라이브러리를 의미한다.
정적 라이브러리 확장자는 윈도우 환경에서는 *.lib, 리눅스 환경에서는 *.a 이다.</p>

<h5 id="정적-라이브러리-장점">정적 라이브러리 장점</h5>
<p>실행 파일이 정적 라이브러리를 복사해서 가지고 있으므로 실행할 때 라이브러리가 필요 없다. 즉 ,
실행 파일만 있으면 프로그램이 동작하는 만큼 이식성이 좋고 안정적이다.</p>

<h5 id="정적-라이브러리-단점">정적 라이브러리 단점</h5>
<ol>
  <li>실행 파일이 라이브러리 내용을 복사해 가지고 있으므로 라이브러리에서 수정할 부분이 있으면 파일 전체를
다시 컴파일하여 재배포해야 한다.</li>
  <li>실행 파일이 라이브러리를 가지고 있는 만큼 실행 파일 크기가 커진다.</li>
  <li>같은 라이브러리를 가진 여러 프로그램이 동시에 실행될 경우 코드가 중복되어 메모리 자원을 낭비한다.</li>
  <li>정적 라이브러리 전체를 링킹하면서 사용하지 않는 함수들까지 전부 다 프로그램에 포함한다.</li>
</ol>

<h3 id="프레임워크와-라이브러리의-차이점">프레임워크와 라이브러리의 차이점</h3>
<hr />
<p>라이브러리와 프레임워크의 차이는 <u>제어 흐름에 대한 주도성이 누구에게 / 어디에 있는가</u> 이다.
즉, 어플리케이션의 <code class="language-plaintext highlighter-rouge">Flow(흐름)</code>을 누가 쥐고 있느냐에 달려 있다.
프레임워크는 전체적인 흐름을 스스로가 쥐고 있으며 사용자는 그 안에서 필요한 코드를 넣으면 된다.
반면 라이브러리는 사용자가 전체적인 흐름을 만들며 라이브러리를 가져다 쓰는 것이라고 할 수 있다.
정리하면 라이브러리는 라이브러리를 가져다가 사용하고 호출하는 측에 전적으로 주도성있게 사용가능하고
프레임워크는 그 틀안에 이미 제어 흐름에 대한 주도성이 내재(내포)하고 있다.
프레임워크는 가져다가 사용하기보다는 거기에 들어가서 사용한다는 느낌/관점으로 접근할 수 있다.</p>

<h3 id="동적-라이브러리dll-dynamic-link-library-shared-library">동적 라이브러리(DLL, Dynamic Link Library, Shared Library)</h3>
<p>동적 라이브러리는 동적 링킹(Dynamic Linking) 과정에서 링커가 라이브러리 내용을 복사하지 않고 해당
내용의 주소만 가지고 있다가 런타임에 실행 파일과 라이브러리가 메모리에 위치할 때 해당 주소로 가서 필요한
내용을 가져오는 방식의 라이브러리를 의미한다.</p>

<p>동적 라이브러리 확장자는 윈도우 환경에서 *.dll, 리눅스 환경에서 *.so 이다.</p>

<h4 id="동적-라이브러리-장점">동적 라이브러리 장점</h4>
<p>정적 라이브러리를 사용하는 것보다 실행 파일이 크기가 작아지고 여러므로 동적라이브러리를 메모리에
올려놓고 공유해서 사용하기 때문에 메모리 자원을 효율적으로 사용할 수 있다.</p>

<p>또한, 라이브러리에서 수정할 부분이 있으면 실행 파일을 새로 컴파일할 필요 없이 동적 라이브러리만 
다시 컴파일해서 재배포 할 수 있다.</p>

<h4 id="동적-라이브러리-단점">동적 라이브러리 단점</h4>
<p>동적 라이브러리라고 장점만 있는 것은 아니다.</p>

<p>동적 라이브러리를 사용하는 실행 파일은 실행할 때 동적 라이브러리가 필요하다. 만약 동적 라이브러리가 제대로
링크되어 있지 않거나 버전이 맞지 않는 등의 문제가 있으면 실행이 안 될 수 있다. 즉 , 외부 의존도가 생기며
이식성이 낮은 단점이 있다.</p>

<p>또한, 동적 라이브러리를 사용할 경우 매번 프로그램 영역에서 라이브러리가 저장된 주소로 이동하는 과정이 필요하여
약간의 성능 감소가 있을 수 있다.</p>

<h4 id="dll의-분류">DLL의 분류</h4>
<p>동적 라이브러리에서 한번 더 종류를 나눌 수 있다.
윈도우에서 동적 라이브러리를 *dll 파일이라 부르는데 실행 파일에서 *dll 함수를 호출하는 방법에 따라
암시적 링킹과 명시적  링킹으로 나눌 수 있다.</p>

<p>1) 암시적 링킹(Implicit Linking)
암시적 링킹은 실행 파일 자체에 어떤 *dll의 어떤 함수를 호출하겠다는 정보를 포함시키고 프로그램 실행 시 
해당 함수들을 초기화한 후 이용하는 방식이다.
프로그램을 시작하면 해당 *dll을 로드해 정의된 함수를 마치 자신의 함수처럼 호출할 수 있다.
실행 파일에 어떤 함수를 사용하겠다는 정보를 포함하기 위해선 *lib파일이 필요하다. 이때 정적 라이브러리가 아닌
암시적 링킹을 위해 서는 *lib 파일이 필요하다. 이때 정적 라이브러리가 아니라 암시적 링킹을 위해 필요한 심볼이 들어있는 *.lib 파일로
동적 링킹 과정에 꼭 필요하다.
코드가 간결하여 사용하기 쉽다는 장점이 있다.</p>

<p>2) 명시적 링킹(Explcit Linking)
명시적 링킹은 프로그램이 실행 중일 때 *.dll 파일이 있는지 검사하고 동적으로 원하는 함수만 호출하는 방법이다.
전확하게 호출할 함수의 포인터를 얻어 함수를 호출하는 방법이라 할 수 있다.
링킹 과정에서 함수 정보가 필요하지 않기 때문에 *.lib 파일이 필요 없다.
직접 코드를 통해 원하는 함수만 불러와서 사용하는 방법으로 사용하지 않는 함수들까지 전부 다 프로그램에 포함할 필요가 없어 자원을 아낄 수 있다.
프로그램이 실행 중에 *.dll 파일이 메모리에 읽히므로 실행 중 연결이라고 표현한다.</p>

<p>❖ DLL 분류 정리</p>
<ul>
  <li>*.dll: 윈도우 환경의 동적 라이브러리</li>
  <li>*/lib : 윈도우 환경의 정적 라이브러리</li>
  <li>*so : 리눅스 환경의 동적 라이브러리</li>
  <li>*a : 리눅스 환경의 정적 라이브러리</li>
</ul>

:ET